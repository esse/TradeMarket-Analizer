
import index.*;

import java.awt.event.*;
import java.awt.image.BufferedImage;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.HashMap;
import java.util.ArrayList;

import javax.swing.ImageIcon;

import javassist.bytecode.Descriptor.Iterator;

/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * Gui.java
 *
 * Created on 2009-10-22, 10:58:02
 */

/**
 *
 * @author esse
 */
public class Gui extends javax.swing.JFrame implements ActionListener {
	javax.swing.tree.DefaultMutableTreeNode treeNode1;
    /** Creates new form Gui */
    public Gui() {
        initComponents();
        jButton1.addActionListener(this);
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        datefield = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        datefield2 = new javax.swing.JTextField();
        corfield = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTree1 = new javax.swing.JTree();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButton1.setText("Uruchom");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        datefield.setText("2008-10-06");

        datefield2.setText("2009-01-01");
        datefield2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                datefield2ActionPerformed(evt);
            }
        });

        corfield.setText("0.0108");

        jLabel2.setText("od:");

        jLabel3.setText("do:");

        jLabel4.setText("współczynnik powiązania:");

        jLabel5.setText("Wykres");
        jLabel5.setPreferredSize(new java.awt.Dimension(714, 376));

        jCheckBox1.setText("Bierz pod uwage sytuacje gdy powiazane sa tylko dwa indeksy");
        jCheckBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCheckBox1ActionPerformed(evt);
            }
        });

        treeNode1 = new javax.swing.tree.DefaultMutableTreeNode("Potencjalne punkty");
        jTree1.setModel(new javax.swing.tree.DefaultTreeModel(treeNode1));
        jScrollPane2.setViewportView(jTree1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(934, 934, 934))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 510, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(26, 26, 26)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(datefield, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(63, 63, 63)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(datefield2, javax.swing.GroupLayout.DEFAULT_SIZE, 291, Short.MAX_VALUE))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jCheckBox1)
                                        .addGap(146, 146, 146))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 79, Short.MAX_VALUE)
                                        .addComponent(corfield, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(21, 21, 21)
                                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 199, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(48, 48, 48)))
                                .addGap(81, 81, 81))
                            .addGroup(layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 714, Short.MAX_VALUE)
                                .addContainerGap())))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 521, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 376, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(datefield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(datefield2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(corfield, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jButton1))
                        .addGap(18, 18, 18)
                        .addComponent(jCheckBox1)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void datefield2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_datefield2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_datefield2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jCheckBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCheckBox1ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jCheckBox1ActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField corfield;
    private javax.swing.JTextField datefield;
    private javax.swing.JTextField datefield2;
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTree jTree1;
    // End of variables declaration//GEN-END:variables

    public void actionPerformed(ActionEvent ev) {
		Connector connector = Connector.getConnector();
        String query = "from Event where date >= '" + datefield.getText() + "'and date <= '" + datefield2.getText() + "'";
        String query2 = "from Nasdaq where date >= '" + datefield.getText() + "'and date <= '" + datefield2.getText() + "'";
        String query3 = "from Dax where date >= '" + datefield.getText() + "'and date <= '" + datefield2.getText() + "'";
        String query4 = "from Nikkei where date >= '" + datefield.getText() + "'and date <= '" + datefield2.getText() + "'";
		List<Event> event = connector.getSession().createQuery(query).list();
		List<Index> nasdaq = connector.getSession().createQuery(query2).list();
		List<Index> dax = connector.getSession().createQuery(query3).list();
		List<Index> nikkei = connector.getSession().createQuery(query4).list();
//		indexes.addAll(list3);
//		indexes.addAll(list4);
		
		String events = "";
//        for (java.util.Iterator<Event> i = event.iterator(); i.hasNext(); ) {
//        	events = events + i.next().getDescription() + "\n";
//        }
//        for (java.util.Iterator<Index> i = nasdaq.iterator(); i.hasNext();) {
//        	events = events +  i.next().getValue() + "\n";
//        }
//		Event event = (Event) list.get(0);
//		jTextArea1.append(events);
		DateFormat formatter = new SimpleDateFormat("yyyy-mm-dd");
		Date date;
        try {
        	HashMap<Date, Float> nasdaqMap = new HashMap<Date, Float>(nasdaq.size());
        	HashMap<Date, Float> daxMap = new HashMap<Date, Float>(dax.size());
        	HashMap<Date, Float> nikkeiMap = new HashMap<Date, Float>(nikkei.size());
        	HashMap<Date, ArrayList<Event>> eventsMap = new HashMap<Date, ArrayList<Event>>(event.size());
			date = (Date)formatter.parse(datefield.getText());
			for (java.util.Iterator<Index> i = nasdaq.iterator(); i.hasNext();) {
				Index ind = i.next();
				nasdaqMap.put(ind.getDate(), ind.getValue());
	        }
			for (java.util.Iterator<Index> i = dax.iterator(); i.hasNext();) {
				Index ind = i.next();
				daxMap.put(ind.getDate(), ind.getValue());
	        }
			for (java.util.Iterator<Index> i = nikkei.iterator(); i.hasNext();) {
				Index ind = i.next();
				nikkeiMap.put(ind.getDate(), ind.getValue());
	        }
			
			for (java.util.Iterator<Event> i = event.iterator(); i.hasNext();) {
				Event evn = i.next();
				if (eventsMap.containsKey(evn.getDate())) {
					ArrayList<Event> evnlist;
					evnlist = eventsMap.get(evn.getDate());
					evnlist.add(evn);
					
				} else {
					ArrayList<Event> evnlist = new ArrayList<Event>();
					evnlist.add(evn);
					eventsMap.put(evn.getDate(), evnlist);
				}
				
			}
			ArrayList<HashMap<Date, Float>> maparray;
			maparray = new ArrayList<HashMap<Date, Float>>();
			maparray.add(nasdaqMap);
			maparray.add(daxMap);
			maparray.add(nikkeiMap);
			jLabel5.setText("");
			Runnable drawer = new ChartDrawer(maparray, jLabel5);
			Thread drawingThread = new Thread(drawer);
			drawingThread.start();
//			BufferedImage chart = ChartDrawer.createImage(maparray);
//			jLabel5.setText("");
			
//			jLabel5.setIcon(new ImageIcon(chart));
			treeNode1.removeAllChildren();
			Runnable analyze = new Analyzer(maparray, eventsMap, Float.parseFloat(corfield.getText()), treeNode1, jCheckBox1.isSelected(), jTree1);
			
//			treeNode1.insert(new javax.swing.tree.DefaultMutableTreeNode("Potencjalne punkty"), 0);
			
//			analyze.analyze();
			Thread analyzerThread = new Thread(analyze);
			analyzerThread.start();
			
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

	}

}
